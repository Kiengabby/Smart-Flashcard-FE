import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

// NG-ZORRO Modules
import { NzGridModule } from 'ng-zorro-antd/grid';
import { NzCardModule } from 'ng-zorro-antd/card';
import { NzButtonModule } from 'ng-zorro-antd/button';
import { NzIconModule } from 'ng-zorro-antd/icon';
import { NzSpinModule } from 'ng-zorro-antd/spin';
import { NzEmptyModule } from 'ng-zorro-antd/empty';
import { NzModalModule } from 'ng-zorro-antd/modal';
import { NzModalService } from 'ng-zorro-antd/modal';
import { NzMessageService } from 'ng-zorro-antd/message';
import { NzTypographyModule } from 'ng-zorro-antd/typography';
import { NzStatisticModule } from 'ng-zorro-antd/statistic';
import { NzAvatarModule } from 'ng-zorro-antd/avatar';

// Services v√† interfaces
import { DeckService } from '../../services/deck.service';
import { TokenService } from '../../services/token.service';
import { OnboardingService } from '../../services/onboarding.service';
import { DeckDTO } from '../../interfaces/deck.dto';
import { CreateDeckModalComponent } from '../../components/create-deck-modal/create-deck-modal.component';
import { DeckCardComponent } from '../../components/deck-card/deck-card.component';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    // NG-ZORRO
    NzGridModule,
    NzCardModule,
    NzButtonModule,
    NzIconModule,
    NzSpinModule,
    NzEmptyModule,
    NzModalModule,
    NzTypographyModule,
    NzStatisticModule,
    NzAvatarModule,
  ],
  providers: [
    NzModalService,
    NzMessageService
  ],
  templateUrl: './dashboard-clean.html',
  styleUrls: ['./dashboard-new.scss'],
})
export class DashboardComponent implements OnInit {
  
  // Properties cho th·ªëng k√™ - ƒë√∫ng v·ªõi t√≠nh nƒÉng d·ª± √°n
  stats = {
    conqueredDecks: 3,        // S·ªë b·ªô th·∫ª ƒë√£ chinh ph·ª•c
    studyStreak: 7,           // Chu·ªói ng√†y h·ªçc li√™n ti·∫øp
    totalWordsLearned: 156,   // T·ªïng s·ªë t·ª´ ƒë√£ h·ªçc
    reviewToday: 15,          // S·ªë th·∫ª c·∫ßn √¥n t·∫≠p h√¥m nay
    totalDecks: 5,            // T·ªïng s·ªë b·ªô th·∫ª
    activeChallenges: 1       // S·ªë l·ªùi th√°ch ƒë·∫•u ƒëang ch·ªù
  };

  // T√≠nh ph·∫ßn trƒÉm s·ª≠ d·ª•ng
  get usagePercentage(): number {
    return this.stats.conqueredDecks > 0 
      ? Math.round((this.stats.conqueredDecks / this.stats.totalDecks) * 100) 
      : 0;
  }

  // Calendar properties
  currentMonth: number = new Date().getMonth() + 1;
  currentYear: number = new Date().getFullYear();
  calendarDays: Array<{
    date: number;
    currentMonth: boolean;
    isToday: boolean;
    hasActivity: boolean;
    activityLevel: number;
  }> = [];

  // Properties cho qu·∫£n l√Ω b·ªô th·∫ª
  decks: DeckDTO[] = [];
  isLoading = true;

  // User info - l·∫•y t·ª´ TokenService
  currentUser = {
    name: '',
    totalDecks: 0,
    studiedToday: 0
  };

  constructor(
    private deckService: DeckService,
    private tokenService: TokenService,
    private onboardingService: OnboardingService,
    private modalService: NzModalService,
    private messageService: NzMessageService
  ) {}

  ngOnInit(): void {
    this.loadUserInfo();
    this.generateCalendar();
    this.loadDecks();
    
    // üéØ Check v√† trigger onboarding tour cho ng∆∞·ªùi d√πng m·ªõi
    this.checkAndStartOnboarding();
  }

  /**
   * Ki·ªÉm tra v√† b·∫Øt ƒë·∫ßu onboarding tour cho ng∆∞·ªùi d√πng l·∫ßn ƒë·∫ßu
   */
  checkAndStartOnboarding(): void {
    // Delay m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ render ƒë·∫ßy ƒë·ªß
    setTimeout(() => {
      if (!this.onboardingService.hasCompletedOnboarding()) {
        this.onboardingService.startDashboardTour();
      }
    }, 500);
  }

  /**
   * Load th√¥ng tin user t·ª´ token
   */
  loadUserInfo(): void {
    const userInfo = this.tokenService.getUserInfo();
    if (userInfo) {
      this.currentUser.name = userInfo.displayName || userInfo.email;
    }
  }

  /**
   * T·∫°o calendar cho th√°ng hi·ªán t·∫°i
   */
  generateCalendar(): void {
    this.calendarDays = [];
    const year = this.currentYear;
    const month = this.currentMonth - 1; // JS months are 0-indexed
    
    // Ng√†y ƒë·∫ßu ti√™n c·ªßa th√°ng
    const firstDay = new Date(year, month, 1);
    const startingDayOfWeek = firstDay.getDay();
    
    // S·ªë ng√†y trong th√°ng
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    // S·ªë ng√†y c·ªßa th√°ng tr∆∞·ªõc
    const daysInPrevMonth = new Date(year, month, 0).getDate();
    
    // Ng√†y h√¥m nay
    const today = new Date();
    const isCurrentMonth = today.getMonth() === month && today.getFullYear() === year;
    const todayDate = today.getDate();
    
    // Sample activity data (s·∫Ω thay b·∫±ng data th·ª±c t·ª´ API)
    const activityDates = [13, 14, 15, 16, 17, 18];
    
    // Th√™m c√°c ng√†y c·ªßa th√°ng tr∆∞·ªõc
    for (let i = startingDayOfWeek - 1; i >= 0; i--) {
      this.calendarDays.push({
        date: daysInPrevMonth - i,
        currentMonth: false,
        isToday: false,
        hasActivity: false,
        activityLevel: 0
      });
    }
    
    // Th√™m c√°c ng√†y c·ªßa th√°ng hi·ªán t·∫°i
    for (let day = 1; day <= daysInMonth; day++) {
      const hasActivity = activityDates.includes(day);
      this.calendarDays.push({
        date: day,
        currentMonth: true,
        isToday: isCurrentMonth && day === todayDate,
        hasActivity: hasActivity,
        activityLevel: hasActivity ? Math.floor(Math.random() * 3) + 1 : 0
      });
    }
    
    // Th√™m c√°c ng√†y c·ªßa th√°ng sau ƒë·ªÉ fill calendar grid
    const remainingDays = 42 - this.calendarDays.length; // 6 rows * 7 days
    for (let day = 1; day <= remainingDays; day++) {
      this.calendarDays.push({
        date: day,
        currentMonth: false,
        isToday: false,
        hasActivity: false,
        activityLevel: 0
      });
    }
  }

  /**
   * Chuy·ªÉn sang th√°ng tr∆∞·ªõc
   */
  previousMonth(): void {
    if (this.currentMonth === 1) {
      this.currentMonth = 12;
      this.currentYear--;
    } else {
      this.currentMonth--;
    }
    this.generateCalendar();
  }

  /**
   * Chuy·ªÉn sang th√°ng sau
   */
  nextMonth(): void {
    if (this.currentMonth === 12) {
      this.currentMonth = 1;
      this.currentYear++;
    } else {
      this.currentMonth++;
    }
    this.generateCalendar();
  }

  /**
   * ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn c√°c action
   */
  navigateToAction(action: string): void {
    console.log('Navigate to:', action);
    this.messageService.info(`Ch·ª©c nƒÉng ${action} ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn!`);
  }

  /**
   * T·∫£i danh s√°ch b·ªô th·∫ª t·ª´ server
   */
  loadDecks(): void {
    this.isLoading = true;
    
    // T·∫°m th·ªùi s·ª≠ d·ª•ng mock data ƒë·ªÉ test giao di·ªán
    setTimeout(() => {
      this.decks = [
        {
          id: '1',
          name: 'T·ª´ v·ª±ng Ti·∫øng Anh c∆° b·∫£n',
          description: 'B·ªô t·ª´ v·ª±ng ti·∫øng Anh d√†nh cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc. Bao g·ªìm c√°c t·ª´ th√¥ng d·ª•ng trong giao ti·∫øp h√†ng ng√†y, gi√∫p b·∫°n t·ª± tin giao ti·∫øp.',
          cardCount: 150,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: '2', 
          name: 'L·ªãch s·ª≠ Vi·ªát Nam',
          description: 'Nh·ªØng s·ª± ki·ªán quan tr·ªçng trong l·ªãch s·ª≠ Vi·ªát Nam t·ª´ th·ªùi c·ªï ƒë·∫°i ƒë·∫øn hi·ªán ƒë·∫°i. T√¨m hi·ªÉu v·ªÅ c√°c tri·ªÅu ƒë·∫°i v√† nh·ªØng b∆∞·ªõc ngo·∫∑t l·ªãch s·ª≠.',
          cardCount: 89,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: '3',
          name: 'To√°n h·ªçc l·ªõp 12',
          description: 'C√¥ng th·ª©c v√† ƒë·ªãnh l√Ω to√°n h·ªçc quan tr·ªçng cho k·ª≥ thi THPT Qu·ªëc gia. Bao g·ªìm ƒë·∫°i s·ªë, h√¨nh h·ªçc v√† gi·∫£i t√≠ch.',
          cardCount: 234,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: '4',
          name: 'T·ª´ v·ª±ng TOEIC',
          description: 'B·ªô t·ª´ v·ª±ng TOEIC ph·∫ßn Business v√† Academic ƒë·ªÉ ƒë·∫°t ƒëi·ªÉm cao. ƒê∆∞·ª£c bi√™n so·∫°n theo chu·∫©n qu·ªëc t·∫ø.',
          cardCount: 456,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: '5',
          name: 'Khoa h·ªçc t·ª± nhi√™n',
          description: 'Ki·∫øn th·ª©c c∆° b·∫£n v·ªÅ v·∫≠t l√Ω, h√≥a h·ªçc, sinh h·ªçc d√†nh cho h·ªçc sinh THCS. D·ªÖ hi·ªÉu v√† th·ª±c t·∫ø.',
          cardCount: 178,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        },
        {
          id: '6',
          name: 'Ng·ªØ ph√°p ti·∫øng Anh',
          description: 'C√°c c·∫•u tr√∫c ng·ªØ ph√°p ti·∫øng Anh t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao v·ªõi v√≠ d·ª• minh h·ªça c·ª• th·ªÉ.',
          cardCount: 312,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      ];
      this.isLoading = false;
      this.updateUserStats(); // C·∫≠p nh·∫≠t th·ªëng k√™ sau khi load
    }, 1000); // Gi·∫£ l·∫≠p th·ªùi gian loading 1 gi√¢y

    // Code g·ªëc ƒë·ªÉ g·ªçi API (s·∫Ω d√πng khi c√≥ backend)
    /*
    this.deckService.getDecks().subscribe({
      next: (data: DeckDTO[]) => {
        this.decks = data;
        this.isLoading = false;
      },
      error: (error) => {
        console.error('L·ªói khi t·∫£i danh s√°ch b·ªô th·∫ª:', error);
        this.messageService.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch b·ªô th·∫ª. Vui l√≤ng th·ª≠ l·∫°i!');
        this.isLoading = false;
      }
    });
    */
  }

  /**
   * M·ªü modal t·∫°o b·ªô th·∫ª m·ªõi
   */
  openCreateDeckModal(): void {
    const modalRef = this.modalService.create({
      nzTitle: 'T·∫°o m·ªôt b·ªô th·∫ª m·ªõi',
      nzContent: CreateDeckModalComponent,
      nzFooter: null,
      nzCentered: true
    });

    modalRef.afterClose.subscribe((result) => {
      if (result === true) {
        this.messageService.success('T·∫°o b·ªô th·∫ª th√†nh c√¥ng!');
        this.loadDecks();
      }
    });
  }

  /**
   * B·∫Øt ƒë·∫ßu h·ªçc m·ªôt b·ªô th·∫ª
   */
  startStudying(deck: DeckDTO): void {
    this.messageService.info(`B·∫Øt ƒë·∫ßu h·ªçc b·ªô th·∫ª: ${deck.name}`);
    // TODO: Navigate to study page
    // this.router.navigate(['/study', deck.id]);
  }

  /**
   * M·ªü c√†i ƒë·∫∑t cho b·ªô th·∫ª
   */
  openDeckSettings(deck: DeckDTO): void {
    this.messageService.info(`M·ªü c√†i ƒë·∫∑t cho b·ªô th·∫ª: ${deck.name}`);
    // TODO: Navigate to deck settings
    // this.router.navigate(['/deck', deck.id, 'settings']);
  }

  /**
   * T√≠nh to√°n progress h·ªçc t·∫≠p gi·∫£ l·∫≠p
   */
  calculateProgress(deck: DeckDTO): number {
    // Gi·∫£ l·∫≠p ti·∫øn ƒë·ªô h·ªçc d·ª±a tr√™n cardCount
    const baseProgress = Math.floor(Math.random() * 80) + 10; // 10-90%
    return Math.min(baseProgress, 100);
  }

  /**
   * C·∫≠p nh·∫≠t th·ªëng k√™ user sau khi load decks
   */
  updateUserStats(): void {
    this.currentUser.totalDecks = this.decks.length;
    this.currentUser.studiedToday = Math.floor(Math.random() * 50) + 10; // Gi·∫£ l·∫≠p
  }
}



